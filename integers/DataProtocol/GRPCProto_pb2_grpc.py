# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import GRPCProto_pb2 as GRPCProto__pb2


class GRPCProtoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/GRPCProto.GRPCProto/Connect',
                request_serializer=GRPCProto__pb2.Ret.SerializeToString,
                response_deserializer=GRPCProto__pb2.Ret.FromString,
                )
        self.GetProjectInfo = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetProjectInfo',
                request_serializer=GRPCProto__pb2.ArgProject.SerializeToString,
                response_deserializer=GRPCProto__pb2.ProjectInfo.FromString,
                )
        self.GetAssets = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetAssets',
                request_serializer=GRPCProto__pb2.Ret.SerializeToString,
                response_deserializer=GRPCProto__pb2.Assets.FromString,
                )
        self.GetGroupsAsset = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetGroupsAsset',
                request_serializer=GRPCProto__pb2.ArgTags.SerializeToString,
                response_deserializer=GRPCProto__pb2.GroupsAssets.FromString,
                )
        self.GetAssetHistInfo = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetAssetHistInfo',
                request_serializer=GRPCProto__pb2.ArgAsset.SerializeToString,
                response_deserializer=GRPCProto__pb2.AssetHistInfo.FromString,
                )
        self.GetGroupsTags = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetGroupsTags',
                request_serializer=GRPCProto__pb2.ArgTags.SerializeToString,
                response_deserializer=GRPCProto__pb2.GroupsTags.FromString,
                )
        self.GetTags = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetTags',
                request_serializer=GRPCProto__pb2.ArgTags.SerializeToString,
                response_deserializer=GRPCProto__pb2.Tags.FromString,
                )
        self.GetData = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetData',
                request_serializer=GRPCProto__pb2.ArgData.SerializeToString,
                response_deserializer=GRPCProto__pb2.TagsDataArray.FromString,
                )
        self.GetDataStream = channel.unary_stream(
                '/GRPCProto.GRPCProto/GetDataStream',
                request_serializer=GRPCProto__pb2.ArgData.SerializeToString,
                response_deserializer=GRPCProto__pb2.TagsDataArray.FromString,
                )
        self.GetDataSnapShot = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetDataSnapShot',
                request_serializer=GRPCProto__pb2.ArgDataSnapShot.SerializeToString,
                response_deserializer=GRPCProto__pb2.TagsDataArray.FromString,
                )
        self.GetSourceDataHistStream = channel.unary_stream(
                '/GRPCProto.GRPCProto/GetSourceDataHistStream',
                request_serializer=GRPCProto__pb2.ArgDataHist.SerializeToString,
                response_deserializer=GRPCProto__pb2.TagsDataHistArray.FromString,
                )
        self.GetSourceSliceDataHistStream = channel.unary_stream(
                '/GRPCProto.GRPCProto/GetSourceSliceDataHistStream',
                request_serializer=GRPCProto__pb2.ArgSliceDataHist.SerializeToString,
                response_deserializer=GRPCProto__pb2.TagsDataHistArray.FromString,
                )
        self.GetEvents = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetEvents',
                request_serializer=GRPCProto__pb2.ArgEvents.SerializeToString,
                response_deserializer=GRPCProto__pb2.Events.FromString,
                )
        self.GetEventsStream = channel.unary_stream(
                '/GRPCProto.GRPCProto/GetEventsStream',
                request_serializer=GRPCProto__pb2.ArgEvents.SerializeToString,
                response_deserializer=GRPCProto__pb2.Events.FromString,
                )
        self.GetUnAckEvents = channel.unary_unary(
                '/GRPCProto.GRPCProto/GetUnAckEvents',
                request_serializer=GRPCProto__pb2.ArgEvents.SerializeToString,
                response_deserializer=GRPCProto__pb2.Events.FromString,
                )
        self.AckEvent = channel.unary_unary(
                '/GRPCProto.GRPCProto/AckEvent',
                request_serializer=GRPCProto__pb2.ArgAckEvent.SerializeToString,
                response_deserializer=GRPCProto__pb2.Ret.FromString,
                )
        self.VerifyUserCredentials = channel.unary_unary(
                '/GRPCProto.GRPCProto/VerifyUserCredentials',
                request_serializer=GRPCProto__pb2.ArgUserCredentials.SerializeToString,
                response_deserializer=GRPCProto__pb2.RetUserParams.FromString,
                )


class GRPCProtoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """конект 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjectInfo(self, request, context):
        """получить cведения об открытом проекте
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssets(self, request, context):
        """получить перечень активов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupsAsset(self, request, context):
        """получить перечень групп актива
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssetHistInfo(self, request, context):
        """получить cведения о ресурсе исторических данных актива
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupsTags(self, request, context):
        """получить перечень групп тэгов актива
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTags(self, request, context):
        """получить перечень тэгов актива
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """получить текущие данные тегов (синхронно)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataStream(self, request, context):
        """получить поток текущих данных тегов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataSnapShot(self, request, context):
        """получить последние данные тегов (моментальный снимок)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSourceDataHistStream(self, request, context):
        """получить исторические данные тегов из источника (для распределенной системы хранения)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSourceSliceDataHistStream(self, request, context):
        """получить срезы исторических данных тегов из источника (для распределенной системы хранения)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvents(self, request, context):
        """получить текущие события (синхронно)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventsStream(self, request, context):
        """получить поток текущих событий
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnAckEvents(self, request, context):
        """получить неподтвержденные события
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AckEvent(self, request, context):
        """подтвердить событие
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyUserCredentials(self, request, context):
        """проверить учетные данные пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCProtoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=GRPCProto__pb2.Ret.FromString,
                    response_serializer=GRPCProto__pb2.Ret.SerializeToString,
            ),
            'GetProjectInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProjectInfo,
                    request_deserializer=GRPCProto__pb2.ArgProject.FromString,
                    response_serializer=GRPCProto__pb2.ProjectInfo.SerializeToString,
            ),
            'GetAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssets,
                    request_deserializer=GRPCProto__pb2.Ret.FromString,
                    response_serializer=GRPCProto__pb2.Assets.SerializeToString,
            ),
            'GetGroupsAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupsAsset,
                    request_deserializer=GRPCProto__pb2.ArgTags.FromString,
                    response_serializer=GRPCProto__pb2.GroupsAssets.SerializeToString,
            ),
            'GetAssetHistInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssetHistInfo,
                    request_deserializer=GRPCProto__pb2.ArgAsset.FromString,
                    response_serializer=GRPCProto__pb2.AssetHistInfo.SerializeToString,
            ),
            'GetGroupsTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupsTags,
                    request_deserializer=GRPCProto__pb2.ArgTags.FromString,
                    response_serializer=GRPCProto__pb2.GroupsTags.SerializeToString,
            ),
            'GetTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTags,
                    request_deserializer=GRPCProto__pb2.ArgTags.FromString,
                    response_serializer=GRPCProto__pb2.Tags.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=GRPCProto__pb2.ArgData.FromString,
                    response_serializer=GRPCProto__pb2.TagsDataArray.SerializeToString,
            ),
            'GetDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDataStream,
                    request_deserializer=GRPCProto__pb2.ArgData.FromString,
                    response_serializer=GRPCProto__pb2.TagsDataArray.SerializeToString,
            ),
            'GetDataSnapShot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataSnapShot,
                    request_deserializer=GRPCProto__pb2.ArgDataSnapShot.FromString,
                    response_serializer=GRPCProto__pb2.TagsDataArray.SerializeToString,
            ),
            'GetSourceDataHistStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSourceDataHistStream,
                    request_deserializer=GRPCProto__pb2.ArgDataHist.FromString,
                    response_serializer=GRPCProto__pb2.TagsDataHistArray.SerializeToString,
            ),
            'GetSourceSliceDataHistStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSourceSliceDataHistStream,
                    request_deserializer=GRPCProto__pb2.ArgSliceDataHist.FromString,
                    response_serializer=GRPCProto__pb2.TagsDataHistArray.SerializeToString,
            ),
            'GetEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvents,
                    request_deserializer=GRPCProto__pb2.ArgEvents.FromString,
                    response_serializer=GRPCProto__pb2.Events.SerializeToString,
            ),
            'GetEventsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEventsStream,
                    request_deserializer=GRPCProto__pb2.ArgEvents.FromString,
                    response_serializer=GRPCProto__pb2.Events.SerializeToString,
            ),
            'GetUnAckEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnAckEvents,
                    request_deserializer=GRPCProto__pb2.ArgEvents.FromString,
                    response_serializer=GRPCProto__pb2.Events.SerializeToString,
            ),
            'AckEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AckEvent,
                    request_deserializer=GRPCProto__pb2.ArgAckEvent.FromString,
                    response_serializer=GRPCProto__pb2.Ret.SerializeToString,
            ),
            'VerifyUserCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyUserCredentials,
                    request_deserializer=GRPCProto__pb2.ArgUserCredentials.FromString,
                    response_serializer=GRPCProto__pb2.RetUserParams.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GRPCProto.GRPCProto', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCProto(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/Connect',
            GRPCProto__pb2.Ret.SerializeToString,
            GRPCProto__pb2.Ret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetProjectInfo',
            GRPCProto__pb2.ArgProject.SerializeToString,
            GRPCProto__pb2.ProjectInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetAssets',
            GRPCProto__pb2.Ret.SerializeToString,
            GRPCProto__pb2.Assets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupsAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetGroupsAsset',
            GRPCProto__pb2.ArgTags.SerializeToString,
            GRPCProto__pb2.GroupsAssets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssetHistInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetAssetHistInfo',
            GRPCProto__pb2.ArgAsset.SerializeToString,
            GRPCProto__pb2.AssetHistInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupsTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetGroupsTags',
            GRPCProto__pb2.ArgTags.SerializeToString,
            GRPCProto__pb2.GroupsTags.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetTags',
            GRPCProto__pb2.ArgTags.SerializeToString,
            GRPCProto__pb2.Tags.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetData',
            GRPCProto__pb2.ArgData.SerializeToString,
            GRPCProto__pb2.TagsDataArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GRPCProto.GRPCProto/GetDataStream',
            GRPCProto__pb2.ArgData.SerializeToString,
            GRPCProto__pb2.TagsDataArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataSnapShot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetDataSnapShot',
            GRPCProto__pb2.ArgDataSnapShot.SerializeToString,
            GRPCProto__pb2.TagsDataArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSourceDataHistStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GRPCProto.GRPCProto/GetSourceDataHistStream',
            GRPCProto__pb2.ArgDataHist.SerializeToString,
            GRPCProto__pb2.TagsDataHistArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSourceSliceDataHistStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GRPCProto.GRPCProto/GetSourceSliceDataHistStream',
            GRPCProto__pb2.ArgSliceDataHist.SerializeToString,
            GRPCProto__pb2.TagsDataHistArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetEvents',
            GRPCProto__pb2.ArgEvents.SerializeToString,
            GRPCProto__pb2.Events.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GRPCProto.GRPCProto/GetEventsStream',
            GRPCProto__pb2.ArgEvents.SerializeToString,
            GRPCProto__pb2.Events.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUnAckEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/GetUnAckEvents',
            GRPCProto__pb2.ArgEvents.SerializeToString,
            GRPCProto__pb2.Events.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AckEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/AckEvent',
            GRPCProto__pb2.ArgAckEvent.SerializeToString,
            GRPCProto__pb2.Ret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyUserCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GRPCProto.GRPCProto/VerifyUserCredentials',
            GRPCProto__pb2.ArgUserCredentials.SerializeToString,
            GRPCProto__pb2.RetUserParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
